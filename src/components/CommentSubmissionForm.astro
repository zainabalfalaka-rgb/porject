---
export interface Props {
  postId: string;
  postType: 'warning' | 'lawyer' | 'guide' | 'case';
}

const { postId, postType } = Astro.props;
---

<section class="comment-submission-section">
  <div class="comment-form-container">
    <div class="form-header">
      <h3>اترك تعليقاً</h3>
      <p>شاركنا رأيك أو تجربتك مع هذا المحتوى</p>
    </div>
    
    <form class="comment-form" id="commentSubmissionForm" data-post-id={postId} data-post-type={postType}>
      <div class="form-grid">
        <div class="form-group">
          <label for="authorName" class="form-label">الاسم *</label>
          <input 
            type="text" 
            id="authorName" 
            name="authorName" 
            class="form-input" 
            required
            placeholder="أدخل اسمك"
            maxlength="100"
          />
        </div>
        
        <div class="form-group">
          <label for="authorEmail" class="form-label">البريد الإلكتروني *</label>
          <input 
            type="email" 
            id="authorEmail" 
            name="authorEmail" 
            class="form-input" 
            required
            placeholder="your@email.com"
          />
        </div>
      </div>
      
      <div class="form-group">
        <label for="commentText" class="form-label">التعليق *</label>
        <textarea 
          id="commentText" 
          name="commentText" 
          class="form-textarea" 
          rows="4" 
          required
          placeholder="اكتب تعليقك هنا..."
          maxlength="1000"
        ></textarea>
        <div class="character-count">
          <span id="charCount">0</span>/1000 حرف
        </div>
      </div>
      
      <div class="form-group">
        <div class="checkbox-group">
          <input type="checkbox" id="commentPrivacy" name="privacy" class="form-checkbox" required />
          <label for="commentPrivacy" class="checkbox-label">
            أوافق على <a href="/privacy/" target="_blank">سياسة الخصوصية</a> وأفهم أن تعليقي سيتم مراجعته قبل النشر
          </label>
        </div>
      </div>
      
      <button type="submit" class="btn btn-primary submit-btn">
        <span class="btn-text">إرسال التعليق</span>
        <div class="loading-spinner" style="display: none;">
          <div class="spinner"></div>
        </div>
      </button>
      
      <input type="hidden" name="postId" value={postId} />
      <input type="hidden" name="postType" value={postType} />
    </form>
    
    <div class="form-message" id="commentFormMessage" style="display: none;"></div>
    
    <div class="moderation-notice">
      <div class="notice-icon">ℹ️</div>
      <p>
        <strong>ملاحظة:</strong> جميع التعليقات تخضع للمراجعة قبل النشر لضمان جودة المحتوى. 
        سيتم نشر تعليقك خلال 24 ساعة من المراجعة.
      </p>
    </div>
  </div>
</section>

<script>
  import { commentsAPI } from '../lib/supabase.js';
  
  document.addEventListener('DOMContentLoaded', function() {
    const commentForm = document.getElementById('commentSubmissionForm');
    const submitBtn = commentForm?.querySelector('.submit-btn');
    const btnText = submitBtn?.querySelector('.btn-text');
    const loadingSpinner = submitBtn?.querySelector('.loading-spinner');
    const messageDiv = document.getElementById('commentFormMessage');
    const commentTextarea = document.getElementById('commentText');
    const charCount = document.getElementById('charCount');
    
    // عداد الأحرف
    if (commentTextarea && charCount) {
      commentTextarea.addEventListener('input', function() {
        const currentLength = this.value.length;
        charCount.textContent = currentLength;
        
        if (currentLength > 900) {
          charCount.style.color = 'var(--color-error)';
        } else if (currentLength > 800) {
          charCount.style.color = 'var(--color-warning)';
        } else {
          charCount.style.color = 'var(--color-neutral-500)';
        }
      });
    }
    
    if (commentForm && submitBtn && btnText && loadingSpinner && messageDiv) {
      commentForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // إظهار حالة التحميل
        btnText.style.display = 'none';
        loadingSpinner.style.display = 'flex';
        submitBtn.disabled = true;
        
        const formData = new FormData(commentForm);
        const commentData = {
          postId: formData.get('postId'),
          postType: formData.get('postType'),
          authorName: formData.get('authorName'),
          authorEmail: formData.get('authorEmail'),
          commentText: formData.get('commentText')
        };
        
        try {
          // التحقق من إعداد Supabase
          if (!window.supabaseConfigured) {
            throw new Error('يرجى الاتصال بـ Supabase أولاً لتفعيل نظام التعليقات');
          }
          
          // إرسال التعليق إلى Supabase
          await commentsAPI.addComment(commentData);
          
          // نجح الإرسال
          messageDiv.textContent = 'تم إرسال تعليقك بنجاح! سيتم مراجعته ونشره خلال 24 ساعة.';
          messageDiv.className = 'form-message success';
          messageDiv.style.display = 'block';
          
          // إعادة تعيين النموذج
          commentForm.reset();
          if (charCount) charCount.textContent = '0';
          
        } catch (error) {
          console.error('Error submitting comment:', error);
          
          // خطأ في الإرسال
          if (error.message.includes('Supabase')) {
            messageDiv.textContent = 'يرجى الاتصال بـ Supabase أولاً لتفعيل نظام التعليقات. انقر على "Connect to Supabase" في أعلى الشاشة.';
          } else {
            messageDiv.textContent = 'حدث خطأ أثناء إرسال التعليق. يرجى المحاولة مرة أخرى.';
          }
          messageDiv.className = 'form-message error';
          messageDiv.style.display = 'block';
        } finally {
          // إعادة تعيين حالة الزر
          btnText.style.display = 'inline';
          loadingSpinner.style.display = 'none';
          submitBtn.disabled = false;
          
          // إخفاء الرسالة بعد 5 ثوان
          setTimeout(() => {
            messageDiv.style.display = 'none';
          }, 5000);
        }
      });
    }
  });
</script>

<style>
  .comment-submission-section {
    background: var(--color-neutral-50);
    padding: var(--space-8) 0;
  }

  .comment-form-container {
    max-width: 700px;
    margin: 0 auto;
    padding: 0 var(--space-4);
  }

  .form-header {
    text-align: center;
    margin-bottom: var(--space-8);
  }

  .form-header h3 {
    font-size: 1.75rem;
    margin-bottom: var(--space-3);
    color: var(--color-neutral-900);
  }

  .form-header p {
    font-size: 1rem;
    color: var(--color-neutral-600);
  }

  .comment-form {
    background: white;
    padding: var(--space-8);
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-lg);
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
  }

  .form-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-6);
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
  }

  .form-label {
    font-weight: var(--font-weight-semibold);
    color: var(--color-neutral-700);
    font-size: 1rem;
  }

  .form-input,
  .form-textarea {
    padding: var(--space-4);
    border: 2px solid var(--color-neutral-200);
    border-radius: var(--radius-md);
    font-size: 1rem;
    font-family: inherit;
    transition: border-color 0.2s ease;
    direction: rtl;
  }

  .form-input:focus,
  .form-textarea:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(30, 64, 175, 0.1);
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
    line-height: var(--line-height-relaxed);
  }

  .character-count {
    text-align: left;
    font-size: 0.875rem;
    color: var(--color-neutral-500);
    margin-top: var(--space-1);
  }

  .checkbox-group {
    display: flex;
    align-items: flex-start;
    gap: var(--space-3);
  }

  .form-checkbox {
    margin-top: var(--space-1);
    width: 20px;
    height: 20px;
    accent-color: var(--color-primary);
    cursor: pointer;
  }

  .checkbox-label {
    font-size: 0.9rem;
    color: var(--color-neutral-600);
    line-height: var(--line-height-relaxed);
    cursor: pointer;
  }

  .checkbox-label a {
    color: var(--color-primary);
    font-weight: var(--font-weight-semibold);
  }

  .submit-btn {
    align-self: center;
    display: flex;
    align-items: center;
    justify-content: center;
    min-width: 200px;
    height: 48px;
    position: relative;
    margin-top: var(--space-4);
  }

  .loading-spinner {
    display: none;
    align-items: center;
    justify-content: center;
  }

  .spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .form-message {
    padding: var(--space-4);
    border-radius: var(--radius-md);
    margin-top: var(--space-4);
    font-weight: var(--font-weight-semibold);
    text-align: center;
  }

  .form-message.success {
    background: rgba(16, 185, 129, 0.1);
    color: var(--color-success);
    border: 2px solid rgba(16, 185, 129, 0.2);
  }

  .form-message.error {
    background: rgba(239, 68, 68, 0.1);
    color: var(--color-error);
    border: 2px solid rgba(239, 68, 68, 0.2);
  }

  .moderation-notice {
    background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-primary-light) 100%);
    color: white;
    padding: var(--space-6);
    border-radius: var(--radius-lg);
    margin-top: var(--space-6);
    display: flex;
    align-items: flex-start;
    gap: var(--space-3);
  }

  .notice-icon {
    font-size: 1.5rem;
    flex-shrink: 0;
  }

  .moderation-notice p {
    margin: 0;
    color: white;
    line-height: var(--line-height-relaxed);
  }

  .moderation-notice strong {
    color: white;
  }

  @media (max-width: 768px) {
    .form-grid {
      grid-template-columns: 1fr;
      gap: var(--space-4);
    }

    .comment-form {
      padding: var(--space-6);
    }

    .form-header h3 {
      font-size: 1.5rem;
    }

    .submit-btn {
      width: 100%;
    }
  }
</style>