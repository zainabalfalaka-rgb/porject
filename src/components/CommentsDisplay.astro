---
export interface Props {
  postId: string;
  postType: 'warning' | 'lawyer' | 'guide' | 'case';
}

const { postId, postType } = Astro.props;
---

<section class="comments-display-section">
  <div class="comments-container">
    <div class="comments-header">
      <h3>التعليقات</h3>
      <div class="comments-count">
        <span id="commentsCount">جاري التحميل...</span>
      </div>
    </div>
    
    <div class="comments-list" id="commentsList" data-post-id={postId}>
      <div class="loading-comments">
        <div class="loading-spinner">
          <div class="spinner"></div>
        </div>
        <p>جاري تحميل التعليقات...</p>
      </div>
    </div>
    
    <div class="no-comments" id="noComments" style="display: none;">
      <div class="no-comments-icon">💬</div>
      <h4>لا توجد تعليقات بعد</h4>
      <p>كن أول من يعلق على هذا المحتوى</p>
    </div>
  </div>
</section>

<script>
  import { commentsAPI } from '../lib/supabase.js';
  
  document.addEventListener('DOMContentLoaded', async function() {
    const commentsList = document.getElementById('commentsList');
    const commentsCount = document.getElementById('commentsCount');
    const noComments = document.getElementById('noComments');
    const postId = commentsList?.dataset.postId;
    
    if (!postId) {
      console.error('Post ID not found');
      return;
    }
    
    try {
      // التحقق من إعداد Supabase
      if (!window.supabaseConfigured) {
        commentsList.innerHTML = `
          <div class="supabase-notice">
            <div class="notice-icon">🔗</div>
            <h4>نظام التعليقات غير متاح حالياً</h4>
            <p>يرجى الاتصال بـ Supabase لتفعيل نظام التعليقات</p>
            <button onclick="alert('انقر على زر Connect to Supabase في أعلى الشاشة')" class="btn btn-primary btn-sm">
              كيفية التفعيل
            </button>
          </div>
        `;
        return;
      }
      
      // جلب التعليقات المعتمدة
      const comments = await commentsAPI.getApprovedComments(postId);
      const count = comments.length;
      
      // تحديث عداد التعليقات
      if (commentsCount) {
        commentsCount.textContent = count === 0 ? 'لا توجد تعليقات' : 
                                   count === 1 ? 'تعليق واحد' : 
                                   count === 2 ? 'تعليقان' : 
                                   count <= 10 ? `${count} تعليقات` : 
                                   `${count} تعليقاً`;
      }
      
      if (comments.length === 0) {
        // لا توجد تعليقات
        commentsList.style.display = 'none';
        noComments.style.display = 'block';
      } else {
        // عرض التعليقات
        commentsList.innerHTML = comments.map(comment => `
          <article class="comment-item">
            <div class="comment-header">
              <div class="comment-author">
                <div class="author-avatar">
                  ${comment.author_name.charAt(0).toUpperCase()}
                </div>
                <div class="author-info">
                  <h4 class="author-name">${escapeHtml(comment.author_name)}</h4>
                  <time class="comment-date" datetime="${comment.created_at}">
                    ${formatDate(comment.created_at)}
                  </time>
                </div>
              </div>
              <div class="comment-status">
                <span class="approved-badge">✓ معتمد</span>
              </div>
            </div>
            <div class="comment-content">
              <p>${escapeHtml(comment.comment_text).replace(/\n/g, '<br>')}</p>
            </div>
          </article>
        `).join('');
        
        noComments.style.display = 'none';
      }
      
    } catch (error) {
      console.error('Error loading comments:', error);
      commentsList.innerHTML = `
        <div class="error-loading">
          <div class="error-icon">⚠️</div>
          <p>حدث خطأ في تحميل التعليقات. يرجى إعادة تحميل الصفحة.</p>
        </div>
      `;
    }
  });
  
  // دالة لتنسيق التاريخ
  function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now - date) / (1000 * 60 * 60));
    
    if (diffInHours < 1) {
      return 'منذ أقل من ساعة';
    } else if (diffInHours < 24) {
      return `منذ ${diffInHours} ساعة`;
    } else if (diffInHours < 48) {
      return 'منذ يوم واحد';
    } else {
      const diffInDays = Math.floor(diffInHours / 24);
      if (diffInDays <= 30) {
        return `منذ ${diffInDays} أيام`;
      } else {
        return date.toLocaleDateString('ar-AE', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
      }
    }
  }
  
  // دالة لحماية النص من XSS
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
</script>

<style>
  .comments-display-section {
    background: white;
    padding: var(--space-8) 0;
  }

  .comments-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 0 var(--space-4);
  }

  .comments-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-8);
    padding-bottom: var(--space-4);
    border-bottom: 2px solid var(--color-neutral-200);
  }

  .comments-header h3 {
    font-size: 1.75rem;
    color: var(--color-neutral-900);
    margin: 0;
  }

  .comments-count {
    background: var(--color-primary);
    color: white;
    padding: var(--space-2) var(--space-4);
    border-radius: var(--radius-lg);
    font-size: 0.875rem;
    font-weight: var(--font-weight-semibold);
  }

  .comments-list {
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
  }

  .loading-comments {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-4);
    padding: var(--space-8);
    color: var(--color-neutral-500);
  }

  .loading-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .spinner {
    width: 30px;
    height: 30px;
    border: 3px solid var(--color-neutral-200);
    border-top: 3px solid var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .comment-item {
    background: var(--color-neutral-50);
    padding: var(--space-6);
    border-radius: var(--radius-lg);
    border-left: 4px solid var(--color-primary);
    transition: all 0.3s ease;
  }

  .comment-item:hover {
    box-shadow: var(--shadow-md);
    transform: translateY(-2px);
  }

  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-4);
  }

  .comment-author {
    display: flex;
    align-items: center;
    gap: var(--space-3);
  }

  .author-avatar {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-primary-light) 100%);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: var(--font-weight-bold);
    font-size: 1.125rem;
  }

  .author-info {
    display: flex;
    flex-direction: column;
    gap: var(--space-1);
  }

  .author-name {
    font-size: 1rem;
    font-weight: var(--font-weight-semibold);
    color: var(--color-neutral-900);
    margin: 0;
  }

  .comment-date {
    font-size: 0.875rem;
    color: var(--color-neutral-500);
  }

  .comment-status {
    display: flex;
    align-items: center;
  }

  .approved-badge {
    background: var(--color-success);
    color: white;
    padding: var(--space-1) var(--space-3);
    border-radius: var(--radius-md);
    font-size: 0.75rem;
    font-weight: var(--font-weight-bold);
  }

  .comment-content {
    margin-top: var(--space-4);
  }

  .comment-content p {
    color: var(--color-neutral-700);
    line-height: var(--line-height-relaxed);
    margin: 0;
    font-size: 1rem;
  }

  .no-comments {
    text-align: center;
    padding: var(--space-12);
    color: var(--color-neutral-500);
  }

  .no-comments-icon {
    font-size: 3rem;
    margin-bottom: var(--space-4);
    opacity: 0.5;
  }

  .no-comments h4 {
    font-size: 1.25rem;
    margin-bottom: var(--space-2);
    color: var(--color-neutral-600);
  }

  .no-comments p {
    margin: 0;
    font-size: 1rem;
  }

  .error-loading {
    text-align: center;
    padding: var(--space-8);
    background: rgba(239, 68, 68, 0.1);
    border-radius: var(--radius-lg);
    border: 2px solid rgba(239, 68, 68, 0.2);
  }

  .error-icon {
    font-size: 2rem;
    margin-bottom: var(--space-4);
  }

  .error-loading p {
    color: var(--color-error);
    margin: 0;
    font-weight: var(--font-weight-semibold);
  }

  .supabase-notice {
    text-align: center;
    padding: var(--space-8);
    background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-primary-light) 100%);
    color: white;
    border-radius: var(--radius-lg);
  }

  .notice-icon {
    font-size: 2rem;
    margin-bottom: var(--space-4);
  }

  .supabase-notice h4 {
    font-size: 1.25rem;
    margin-bottom: var(--space-2);
    color: white;
  }

  .supabase-notice p {
    margin-bottom: var(--space-4);
    color: rgba(255, 255, 255, 0.9);
  }

  .btn-sm {
    padding: var(--space-2) var(--space-4);
    font-size: 0.875rem;
  }

  @media (max-width: 768px) {
    .comments-header {
      flex-direction: column;
      gap: var(--space-3);
      align-items: flex-start;
    }

    .comment-header {
      flex-direction: column;
      align-items: flex-start;
      gap: var(--space-3);
    }

    .comment-status {
      align-self: flex-end;
    }

    .author-avatar {
      width: 35px;
      height: 35px;
      font-size: 1rem;
    }
  }
</style>